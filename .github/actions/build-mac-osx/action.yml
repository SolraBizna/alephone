name: mac-osx
description: template used to build for mac osx

inputs:
 vcpkg_installed_folder:
    required: true
    type: string
 vcpkg_arch:
    required: true
    type: string
 xcode_arch:
    required: true
    type: string

runs:
    using: "composite"
    steps:
    - uses: actions/checkout@v4
    
    - name: Checkout sms submodule
      run: |
        git submodule sync ./csms-binaries
        git -c protocol.version=2 submodule update --init --force --depth=1 ./csms-binaries
      shell: bash
    
    - name: Install Tools
      run: brew install nasm
      shell: bash

    - name: Update vcpkg
      run: |
        cd $VCPKG_INSTALLATION_ROOT
        git pull
        ./vcpkg update
      shell: bash
      
    - name: Vcpkg Integration
      run: $VCPKG_INSTALLATION_ROOT/vcpkg integrate install
      shell: bash
      
    - name: Get Vcpkg current hash
      run: echo "vcpkg_current_hash=$(git -C $VCPKG_INSTALLATION_ROOT rev-parse --short HEAD)" >> $GITHUB_ENV
      shell: bash
      
    - name: Cache Vcpkg (restore)
      uses: actions/cache/restore@v4
      with:
        path: vcpkg/${{inputs.vcpkg_installed_folder}}
        key: ${{runner.os}}-${{inputs.vcpkg_installed_folder}}-${{env.vcpkg_current_hash}}-${{hashFiles('**/vcpkg.json')}}
        restore-keys: |
          ${{runner.os}}-${{inputs.vcpkg_installed_folder}}-${{env.vcpkg_current_hash}}-
          ${{runner.os}}-${{inputs.vcpkg_installed_folder}}-
      
    - name: Switch to Xcode 14.3.1
      run: sudo xcode-select --switch /Applications/Xcode_14.3.1.app
      shell: bash
      
    - name: Install Dependencies
      run: cd vcpkg && ./install-${{inputs.vcpkg_arch}}-osx.sh
      shell: bash

    - name: Cache Vcpkg (save)
      uses: actions/cache/save@v4
      with:
        path: vcpkg/${{inputs.vcpkg_installed_folder}}
        key: ${{runner.os}}-${{inputs.vcpkg_installed_folder}}-${{env.vcpkg_current_hash}}-${{hashFiles('**/vcpkg.json')}}
      
    - name: Build
      run: cd PBProjects && xcodebuild -arch ${{inputs.xcode_arch}} -target "Aleph One" DEVELOPMENT_TEAM='' CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO build
      shell: bash